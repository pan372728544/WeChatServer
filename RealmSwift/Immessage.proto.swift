/// Generated by the Protocol Buffers 3.7.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "IMMessage.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct ImmessageRoot {
    public static let `default` = ImmessageRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class ProtoUser : GeneratedMessage {
    public typealias BuilderType = ProtoUser.Builder

    public static func == (lhs: ProtoUser, rhs: ProtoUser) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasObjectId == rhs.hasObjectId) && (!lhs.hasObjectId || lhs.objectId == rhs.objectId)
        fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasNickName == rhs.hasNickName) && (!lhs.hasNickName || lhs.nickName == rhs.nickName)
        fieldCheck = fieldCheck && (lhs.hasCountry == rhs.hasCountry) && (!lhs.hasCountry || lhs.country == rhs.country)
        fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
        fieldCheck = fieldCheck && (lhs.hasPicture == rhs.hasPicture) && (!lhs.hasPicture || lhs.picture == rhs.picture)
        fieldCheck = fieldCheck && (lhs.hasThumbnail == rhs.hasThumbnail) && (!lhs.hasThumbnail || lhs.thumbnail == rhs.thumbnail)
        fieldCheck = fieldCheck && (lhs.hasLastActive == rhs.hasLastActive) && (!lhs.hasLastActive || lhs.lastActive == rhs.lastActive)
        fieldCheck = fieldCheck && (lhs.hasLastTerminate == rhs.hasLastTerminate) && (!lhs.hasLastTerminate || lhs.lastTerminate == rhs.lastTerminate)
        fieldCheck = fieldCheck && (lhs.hasCreatedAt == rhs.hasCreatedAt) && (!lhs.hasCreatedAt || lhs.createdAt == rhs.createdAt)
        fieldCheck = fieldCheck && (lhs.hasUpdatedAt == rhs.hasUpdatedAt) && (!lhs.hasUpdatedAt || lhs.updatedAt == rhs.updatedAt)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    /// protoc IMMessage.proto --swift_out="./"
    public fileprivate(set) var objectId:String! = nil
    public fileprivate(set) var hasObjectId:Bool = false

    public fileprivate(set) var phone:String! = nil
    public fileprivate(set) var hasPhone:Bool = false

    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var nickName:String! = nil
    public fileprivate(set) var hasNickName:Bool = false

    public fileprivate(set) var country:String! = nil
    public fileprivate(set) var hasCountry:Bool = false

    public fileprivate(set) var status:String! = nil
    public fileprivate(set) var hasStatus:Bool = false

    public fileprivate(set) var picture:String! = nil
    public fileprivate(set) var hasPicture:Bool = false

    public fileprivate(set) var thumbnail:String! = nil
    public fileprivate(set) var hasThumbnail:Bool = false

    public fileprivate(set) var lastActive:Int64! = nil
    public fileprivate(set) var hasLastActive:Bool = false

    public fileprivate(set) var lastTerminate:Int64! = nil
    public fileprivate(set) var hasLastTerminate:Bool = false

    public fileprivate(set) var createdAt:Int64! = nil
    public fileprivate(set) var hasCreatedAt:Bool = false

    public fileprivate(set) var updatedAt:Int64! = nil
    public fileprivate(set) var hasUpdatedAt:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasObjectId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"objectId\" mark required")
        }
        if !hasPhone {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"phone\" mark required")
        }
        if !hasName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"name\" mark required")
        }
        if !hasNickName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"nickName\" mark required")
        }
        if !hasCountry {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"country\" mark required")
        }
        if !hasStatus {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"status\" mark required")
        }
        if !hasPicture {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"picture\" mark required")
        }
        if !hasThumbnail {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"thumbnail\" mark required")
        }
        if !hasLastActive {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"lastActive\" mark required")
        }
        if !hasLastTerminate {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"lastTerminate\" mark required")
        }
        if !hasCreatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"createdAt\" mark required")
        }
        if !hasUpdatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoUser.self): field \"updatedAt\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasObjectId {
            try codedOutputStream.writeString(fieldNumber: 1, value:objectId)
        }
        if hasPhone {
            try codedOutputStream.writeString(fieldNumber: 2, value:phone)
        }
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 3, value:name)
        }
        if hasNickName {
            try codedOutputStream.writeString(fieldNumber: 4, value:nickName)
        }
        if hasCountry {
            try codedOutputStream.writeString(fieldNumber: 5, value:country)
        }
        if hasStatus {
            try codedOutputStream.writeString(fieldNumber: 6, value:status)
        }
        if hasPicture {
            try codedOutputStream.writeString(fieldNumber: 7, value:picture)
        }
        if hasThumbnail {
            try codedOutputStream.writeString(fieldNumber: 8, value:thumbnail)
        }
        if hasLastActive {
            try codedOutputStream.writeInt64(fieldNumber: 9, value:lastActive)
        }
        if hasLastTerminate {
            try codedOutputStream.writeInt64(fieldNumber: 10, value:lastTerminate)
        }
        if hasCreatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 11, value:createdAt)
        }
        if hasUpdatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 12, value:updatedAt)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasObjectId {
            serialize_size += objectId.computeStringSize(fieldNumber: 1)
        }
        if hasPhone {
            serialize_size += phone.computeStringSize(fieldNumber: 2)
        }
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 3)
        }
        if hasNickName {
            serialize_size += nickName.computeStringSize(fieldNumber: 4)
        }
        if hasCountry {
            serialize_size += country.computeStringSize(fieldNumber: 5)
        }
        if hasStatus {
            serialize_size += status.computeStringSize(fieldNumber: 6)
        }
        if hasPicture {
            serialize_size += picture.computeStringSize(fieldNumber: 7)
        }
        if hasThumbnail {
            serialize_size += thumbnail.computeStringSize(fieldNumber: 8)
        }
        if hasLastActive {
            serialize_size += lastActive.computeInt64Size(fieldNumber: 9)
        }
        if hasLastTerminate {
            serialize_size += lastTerminate.computeInt64Size(fieldNumber: 10)
        }
        if hasCreatedAt {
            serialize_size += createdAt.computeInt64Size(fieldNumber: 11)
        }
        if hasUpdatedAt {
            serialize_size += updatedAt.computeInt64Size(fieldNumber: 12)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ProtoUser.Builder {
        return ProtoUser.classBuilder() as! ProtoUser.Builder
    }
    public func getBuilder() -> ProtoUser.Builder {
        return classBuilder() as! ProtoUser.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoUser.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoUser.Builder()
    }
    public func toBuilder() throws -> ProtoUser.Builder {
        return try ProtoUser.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ProtoUser) throws -> ProtoUser.Builder {
        return try ProtoUser.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasObjectId {
            jsonMap["objectId"] = objectId
        }
        if hasPhone {
            jsonMap["phone"] = phone
        }
        if hasName {
            jsonMap["name"] = name
        }
        if hasNickName {
            jsonMap["nickName"] = nickName
        }
        if hasCountry {
            jsonMap["country"] = country
        }
        if hasStatus {
            jsonMap["status"] = status
        }
        if hasPicture {
            jsonMap["picture"] = picture
        }
        if hasThumbnail {
            jsonMap["thumbnail"] = thumbnail
        }
        if hasLastActive {
            jsonMap["lastActive"] = "\(lastActive!)"
        }
        if hasLastTerminate {
            jsonMap["lastTerminate"] = "\(lastTerminate!)"
        }
        if hasCreatedAt {
            jsonMap["createdAt"] = "\(createdAt!)"
        }
        if hasUpdatedAt {
            jsonMap["updatedAt"] = "\(updatedAt!)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ProtoUser {
        return try ProtoUser.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoUser {
        return try ProtoUser.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasObjectId {
            output += "\(indent) objectId: \(String(describing: objectId)) \n"
        }
        if hasPhone {
            output += "\(indent) phone: \(String(describing: phone)) \n"
        }
        if hasName {
            output += "\(indent) name: \(String(describing: name)) \n"
        }
        if hasNickName {
            output += "\(indent) nickName: \(String(describing: nickName)) \n"
        }
        if hasCountry {
            output += "\(indent) country: \(String(describing: country)) \n"
        }
        if hasStatus {
            output += "\(indent) status: \(String(describing: status)) \n"
        }
        if hasPicture {
            output += "\(indent) picture: \(String(describing: picture)) \n"
        }
        if hasThumbnail {
            output += "\(indent) thumbnail: \(String(describing: thumbnail)) \n"
        }
        if hasLastActive {
            output += "\(indent) lastActive: \(String(describing: lastActive)) \n"
        }
        if hasLastTerminate {
            output += "\(indent) lastTerminate: \(String(describing: lastTerminate)) \n"
        }
        if hasCreatedAt {
            output += "\(indent) createdAt: \(String(describing: createdAt)) \n"
        }
        if hasUpdatedAt {
            output += "\(indent) updatedAt: \(String(describing: updatedAt)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasObjectId {
                hashCode = (hashCode &* 31) &+ objectId.hashValue
            }
            if hasPhone {
                hashCode = (hashCode &* 31) &+ phone.hashValue
            }
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasNickName {
                hashCode = (hashCode &* 31) &+ nickName.hashValue
            }
            if hasCountry {
                hashCode = (hashCode &* 31) &+ country.hashValue
            }
            if hasStatus {
                hashCode = (hashCode &* 31) &+ status.hashValue
            }
            if hasPicture {
                hashCode = (hashCode &* 31) &+ picture.hashValue
            }
            if hasThumbnail {
                hashCode = (hashCode &* 31) &+ thumbnail.hashValue
            }
            if hasLastActive {
                hashCode = (hashCode &* 31) &+ lastActive.hashValue
            }
            if hasLastTerminate {
                hashCode = (hashCode &* 31) &+ lastTerminate.hashValue
            }
            if hasCreatedAt {
                hashCode = (hashCode &* 31) &+ createdAt.hashValue
            }
            if hasUpdatedAt {
                hashCode = (hashCode &* 31) &+ updatedAt.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtoUser"
    }
    override public func className() -> String {
        return "ProtoUser"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ProtoUser = ProtoUser()
        public func getMessage() -> ProtoUser {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        /// protoc IMMessage.proto --swift_out="./"
        public var objectId:String {
            get {
                return builderResult.objectId
            }
            set (value) {
                builderResult.hasObjectId = true
                builderResult.objectId = value
            }
        }
        public var hasObjectId:Bool {
            get {
                return builderResult.hasObjectId
            }
        }
        @discardableResult
        public func setObjectId(_ value:String) -> ProtoUser.Builder {
            self.objectId = value
            return self
        }
        @discardableResult
        public func clearObjectId() -> ProtoUser.Builder{
            builderResult.hasObjectId = false
            builderResult.objectId = nil
            return self
        }
        public var phone:String {
            get {
                return builderResult.phone
            }
            set (value) {
                builderResult.hasPhone = true
                builderResult.phone = value
            }
        }
        public var hasPhone:Bool {
            get {
                return builderResult.hasPhone
            }
        }
        @discardableResult
        public func setPhone(_ value:String) -> ProtoUser.Builder {
            self.phone = value
            return self
        }
        @discardableResult
        public func clearPhone() -> ProtoUser.Builder{
            builderResult.hasPhone = false
            builderResult.phone = nil
            return self
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> ProtoUser.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> ProtoUser.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        public var nickName:String {
            get {
                return builderResult.nickName
            }
            set (value) {
                builderResult.hasNickName = true
                builderResult.nickName = value
            }
        }
        public var hasNickName:Bool {
            get {
                return builderResult.hasNickName
            }
        }
        @discardableResult
        public func setNickName(_ value:String) -> ProtoUser.Builder {
            self.nickName = value
            return self
        }
        @discardableResult
        public func clearNickName() -> ProtoUser.Builder{
            builderResult.hasNickName = false
            builderResult.nickName = nil
            return self
        }
        public var country:String {
            get {
                return builderResult.country
            }
            set (value) {
                builderResult.hasCountry = true
                builderResult.country = value
            }
        }
        public var hasCountry:Bool {
            get {
                return builderResult.hasCountry
            }
        }
        @discardableResult
        public func setCountry(_ value:String) -> ProtoUser.Builder {
            self.country = value
            return self
        }
        @discardableResult
        public func clearCountry() -> ProtoUser.Builder{
            builderResult.hasCountry = false
            builderResult.country = nil
            return self
        }
        public var status:String {
            get {
                return builderResult.status
            }
            set (value) {
                builderResult.hasStatus = true
                builderResult.status = value
            }
        }
        public var hasStatus:Bool {
            get {
                return builderResult.hasStatus
            }
        }
        @discardableResult
        public func setStatus(_ value:String) -> ProtoUser.Builder {
            self.status = value
            return self
        }
        @discardableResult
        public func clearStatus() -> ProtoUser.Builder{
            builderResult.hasStatus = false
            builderResult.status = nil
            return self
        }
        public var picture:String {
            get {
                return builderResult.picture
            }
            set (value) {
                builderResult.hasPicture = true
                builderResult.picture = value
            }
        }
        public var hasPicture:Bool {
            get {
                return builderResult.hasPicture
            }
        }
        @discardableResult
        public func setPicture(_ value:String) -> ProtoUser.Builder {
            self.picture = value
            return self
        }
        @discardableResult
        public func clearPicture() -> ProtoUser.Builder{
            builderResult.hasPicture = false
            builderResult.picture = nil
            return self
        }
        public var thumbnail:String {
            get {
                return builderResult.thumbnail
            }
            set (value) {
                builderResult.hasThumbnail = true
                builderResult.thumbnail = value
            }
        }
        public var hasThumbnail:Bool {
            get {
                return builderResult.hasThumbnail
            }
        }
        @discardableResult
        public func setThumbnail(_ value:String) -> ProtoUser.Builder {
            self.thumbnail = value
            return self
        }
        @discardableResult
        public func clearThumbnail() -> ProtoUser.Builder{
            builderResult.hasThumbnail = false
            builderResult.thumbnail = nil
            return self
        }
        public var lastActive:Int64 {
            get {
                return builderResult.lastActive
            }
            set (value) {
                builderResult.hasLastActive = true
                builderResult.lastActive = value
            }
        }
        public var hasLastActive:Bool {
            get {
                return builderResult.hasLastActive
            }
        }
        @discardableResult
        public func setLastActive(_ value:Int64) -> ProtoUser.Builder {
            self.lastActive = value
            return self
        }
        @discardableResult
        public func clearLastActive() -> ProtoUser.Builder{
            builderResult.hasLastActive = false
            builderResult.lastActive = nil
            return self
        }
        public var lastTerminate:Int64 {
            get {
                return builderResult.lastTerminate
            }
            set (value) {
                builderResult.hasLastTerminate = true
                builderResult.lastTerminate = value
            }
        }
        public var hasLastTerminate:Bool {
            get {
                return builderResult.hasLastTerminate
            }
        }
        @discardableResult
        public func setLastTerminate(_ value:Int64) -> ProtoUser.Builder {
            self.lastTerminate = value
            return self
        }
        @discardableResult
        public func clearLastTerminate() -> ProtoUser.Builder{
            builderResult.hasLastTerminate = false
            builderResult.lastTerminate = nil
            return self
        }
        public var createdAt:Int64 {
            get {
                return builderResult.createdAt
            }
            set (value) {
                builderResult.hasCreatedAt = true
                builderResult.createdAt = value
            }
        }
        public var hasCreatedAt:Bool {
            get {
                return builderResult.hasCreatedAt
            }
        }
        @discardableResult
        public func setCreatedAt(_ value:Int64) -> ProtoUser.Builder {
            self.createdAt = value
            return self
        }
        @discardableResult
        public func clearCreatedAt() -> ProtoUser.Builder{
            builderResult.hasCreatedAt = false
            builderResult.createdAt = nil
            return self
        }
        public var updatedAt:Int64 {
            get {
                return builderResult.updatedAt
            }
            set (value) {
                builderResult.hasUpdatedAt = true
                builderResult.updatedAt = value
            }
        }
        public var hasUpdatedAt:Bool {
            get {
                return builderResult.hasUpdatedAt
            }
        }
        @discardableResult
        public func setUpdatedAt(_ value:Int64) -> ProtoUser.Builder {
            self.updatedAt = value
            return self
        }
        @discardableResult
        public func clearUpdatedAt() -> ProtoUser.Builder{
            builderResult.hasUpdatedAt = false
            builderResult.updatedAt = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ProtoUser.Builder {
            builderResult = ProtoUser()
            return self
        }
        override public func clone() throws -> ProtoUser.Builder {
            return try ProtoUser.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ProtoUser {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ProtoUser {
            let returnMe:ProtoUser = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ProtoUser) throws -> ProtoUser.Builder {
            if other == ProtoUser() {
                return self
            }
            if other.hasObjectId {
                objectId = other.objectId
            }
            if other.hasPhone {
                phone = other.phone
            }
            if other.hasName {
                name = other.name
            }
            if other.hasNickName {
                nickName = other.nickName
            }
            if other.hasCountry {
                country = other.country
            }
            if other.hasStatus {
                status = other.status
            }
            if other.hasPicture {
                picture = other.picture
            }
            if other.hasThumbnail {
                thumbnail = other.thumbnail
            }
            if other.hasLastActive {
                lastActive = other.lastActive
            }
            if other.hasLastTerminate {
                lastTerminate = other.lastTerminate
            }
            if other.hasCreatedAt {
                createdAt = other.createdAt
            }
            if other.hasUpdatedAt {
                updatedAt = other.updatedAt
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ProtoUser.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoUser.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    objectId = try codedInputStream.readString()

                case 18:
                    phone = try codedInputStream.readString()

                case 26:
                    name = try codedInputStream.readString()

                case 34:
                    nickName = try codedInputStream.readString()

                case 42:
                    country = try codedInputStream.readString()

                case 50:
                    status = try codedInputStream.readString()

                case 58:
                    picture = try codedInputStream.readString()

                case 66:
                    thumbnail = try codedInputStream.readString()

                case 72:
                    lastActive = try codedInputStream.readInt64()

                case 80:
                    lastTerminate = try codedInputStream.readInt64()

                case 88:
                    createdAt = try codedInputStream.readInt64()

                case 96:
                    updatedAt = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ProtoUser.Builder {
            let resultDecodedBuilder = ProtoUser.Builder()
            if let jsonValueObjectId = jsonMap["objectId"] as? String {
                resultDecodedBuilder.objectId = jsonValueObjectId
            }
            if let jsonValuePhone = jsonMap["phone"] as? String {
                resultDecodedBuilder.phone = jsonValuePhone
            }
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueNickName = jsonMap["nickName"] as? String {
                resultDecodedBuilder.nickName = jsonValueNickName
            }
            if let jsonValueCountry = jsonMap["country"] as? String {
                resultDecodedBuilder.country = jsonValueCountry
            }
            if let jsonValueStatus = jsonMap["status"] as? String {
                resultDecodedBuilder.status = jsonValueStatus
            }
            if let jsonValuePicture = jsonMap["picture"] as? String {
                resultDecodedBuilder.picture = jsonValuePicture
            }
            if let jsonValueThumbnail = jsonMap["thumbnail"] as? String {
                resultDecodedBuilder.thumbnail = jsonValueThumbnail
            }
            if let jsonValueLastActive = jsonMap["lastActive"] as? String {
                resultDecodedBuilder.lastActive = Int64(jsonValueLastActive)!
            } else if let jsonValueLastActive = jsonMap["lastActive"] as? Int {
                resultDecodedBuilder.lastActive = Int64(jsonValueLastActive)
            }
            if let jsonValueLastTerminate = jsonMap["lastTerminate"] as? String {
                resultDecodedBuilder.lastTerminate = Int64(jsonValueLastTerminate)!
            } else if let jsonValueLastTerminate = jsonMap["lastTerminate"] as? Int {
                resultDecodedBuilder.lastTerminate = Int64(jsonValueLastTerminate)
            }
            if let jsonValueCreatedAt = jsonMap["createdAt"] as? String {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)!
            } else if let jsonValueCreatedAt = jsonMap["createdAt"] as? Int {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)
            }
            if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? String {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)!
            } else if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? Int {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoUser.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ProtoUser.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class ProtoFriend : GeneratedMessage {
    public typealias BuilderType = ProtoFriend.Builder

    public static func == (lhs: ProtoFriend, rhs: ProtoFriend) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasObjectId == rhs.hasObjectId) && (!lhs.hasObjectId || lhs.objectId == rhs.objectId)
        fieldCheck = fieldCheck && (lhs.hasFriendId == rhs.hasFriendId) && (!lhs.hasFriendId || lhs.friendId == rhs.friendId)
        fieldCheck = fieldCheck && (lhs.hasSection == rhs.hasSection) && (!lhs.hasSection || lhs.section == rhs.section)
        fieldCheck = fieldCheck && (lhs.hasIsDeleted == rhs.hasIsDeleted) && (!lhs.hasIsDeleted || lhs.isDeleted == rhs.isDeleted)
        fieldCheck = fieldCheck && (lhs.hasCreatedAt == rhs.hasCreatedAt) && (!lhs.hasCreatedAt || lhs.createdAt == rhs.createdAt)
        fieldCheck = fieldCheck && (lhs.hasUpdatedAt == rhs.hasUpdatedAt) && (!lhs.hasUpdatedAt || lhs.updatedAt == rhs.updatedAt)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasPicture == rhs.hasPicture) && (!lhs.hasPicture || lhs.picture == rhs.picture)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    /// protoc IMMessage.proto --swift_out="./"
    public fileprivate(set) var objectId:String! = nil
    public fileprivate(set) var hasObjectId:Bool = false

    public fileprivate(set) var friendId:String! = nil
    public fileprivate(set) var hasFriendId:Bool = false

    public fileprivate(set) var section:String! = nil
    public fileprivate(set) var hasSection:Bool = false

    public fileprivate(set) var isDeleted:Bool! = nil
    public fileprivate(set) var hasIsDeleted:Bool = false

    public fileprivate(set) var createdAt:Int64! = nil
    public fileprivate(set) var hasCreatedAt:Bool = false

    public fileprivate(set) var updatedAt:Int64! = nil
    public fileprivate(set) var hasUpdatedAt:Bool = false

    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var picture:String! = nil
    public fileprivate(set) var hasPicture:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasObjectId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"objectId\" mark required")
        }
        if !hasFriendId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"friendId\" mark required")
        }
        if !hasSection {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"section\" mark required")
        }
        if !hasIsDeleted {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"isDeleted\" mark required")
        }
        if !hasCreatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"createdAt\" mark required")
        }
        if !hasUpdatedAt {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"updatedAt\" mark required")
        }
        if !hasName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"name\" mark required")
        }
        if !hasPicture {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ProtoFriend.self): field \"picture\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasObjectId {
            try codedOutputStream.writeString(fieldNumber: 1, value:objectId)
        }
        if hasFriendId {
            try codedOutputStream.writeString(fieldNumber: 2, value:friendId)
        }
        if hasSection {
            try codedOutputStream.writeString(fieldNumber: 3, value:section)
        }
        if hasIsDeleted {
            try codedOutputStream.writeBool(fieldNumber: 4, value:isDeleted)
        }
        if hasCreatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 5, value:createdAt)
        }
        if hasUpdatedAt {
            try codedOutputStream.writeInt64(fieldNumber: 6, value:updatedAt)
        }
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 7, value:name)
        }
        if hasPicture {
            try codedOutputStream.writeString(fieldNumber: 8, value:picture)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasObjectId {
            serialize_size += objectId.computeStringSize(fieldNumber: 1)
        }
        if hasFriendId {
            serialize_size += friendId.computeStringSize(fieldNumber: 2)
        }
        if hasSection {
            serialize_size += section.computeStringSize(fieldNumber: 3)
        }
        if hasIsDeleted {
            serialize_size += isDeleted.computeBoolSize(fieldNumber: 4)
        }
        if hasCreatedAt {
            serialize_size += createdAt.computeInt64Size(fieldNumber: 5)
        }
        if hasUpdatedAt {
            serialize_size += updatedAt.computeInt64Size(fieldNumber: 6)
        }
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 7)
        }
        if hasPicture {
            serialize_size += picture.computeStringSize(fieldNumber: 8)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ProtoFriend.Builder {
        return ProtoFriend.classBuilder() as! ProtoFriend.Builder
    }
    public func getBuilder() -> ProtoFriend.Builder {
        return classBuilder() as! ProtoFriend.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoFriend.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ProtoFriend.Builder()
    }
    public func toBuilder() throws -> ProtoFriend.Builder {
        return try ProtoFriend.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ProtoFriend) throws -> ProtoFriend.Builder {
        return try ProtoFriend.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasObjectId {
            jsonMap["objectId"] = objectId
        }
        if hasFriendId {
            jsonMap["friendId"] = friendId
        }
        if hasSection {
            jsonMap["section"] = section
        }
        if hasIsDeleted {
            jsonMap["isDeleted"] = isDeleted
        }
        if hasCreatedAt {
            jsonMap["createdAt"] = "\(createdAt!)"
        }
        if hasUpdatedAt {
            jsonMap["updatedAt"] = "\(updatedAt!)"
        }
        if hasName {
            jsonMap["name"] = name
        }
        if hasPicture {
            jsonMap["picture"] = picture
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ProtoFriend {
        return try ProtoFriend.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoFriend {
        return try ProtoFriend.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasObjectId {
            output += "\(indent) objectId: \(String(describing: objectId)) \n"
        }
        if hasFriendId {
            output += "\(indent) friendId: \(String(describing: friendId)) \n"
        }
        if hasSection {
            output += "\(indent) section: \(String(describing: section)) \n"
        }
        if hasIsDeleted {
            output += "\(indent) isDeleted: \(String(describing: isDeleted)) \n"
        }
        if hasCreatedAt {
            output += "\(indent) createdAt: \(String(describing: createdAt)) \n"
        }
        if hasUpdatedAt {
            output += "\(indent) updatedAt: \(String(describing: updatedAt)) \n"
        }
        if hasName {
            output += "\(indent) name: \(String(describing: name)) \n"
        }
        if hasPicture {
            output += "\(indent) picture: \(String(describing: picture)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasObjectId {
                hashCode = (hashCode &* 31) &+ objectId.hashValue
            }
            if hasFriendId {
                hashCode = (hashCode &* 31) &+ friendId.hashValue
            }
            if hasSection {
                hashCode = (hashCode &* 31) &+ section.hashValue
            }
            if hasIsDeleted {
                hashCode = (hashCode &* 31) &+ isDeleted.hashValue
            }
            if hasCreatedAt {
                hashCode = (hashCode &* 31) &+ createdAt.hashValue
            }
            if hasUpdatedAt {
                hashCode = (hashCode &* 31) &+ updatedAt.hashValue
            }
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasPicture {
                hashCode = (hashCode &* 31) &+ picture.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtoFriend"
    }
    override public func className() -> String {
        return "ProtoFriend"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ProtoFriend = ProtoFriend()
        public func getMessage() -> ProtoFriend {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        /// protoc IMMessage.proto --swift_out="./"
        public var objectId:String {
            get {
                return builderResult.objectId
            }
            set (value) {
                builderResult.hasObjectId = true
                builderResult.objectId = value
            }
        }
        public var hasObjectId:Bool {
            get {
                return builderResult.hasObjectId
            }
        }
        @discardableResult
        public func setObjectId(_ value:String) -> ProtoFriend.Builder {
            self.objectId = value
            return self
        }
        @discardableResult
        public func clearObjectId() -> ProtoFriend.Builder{
            builderResult.hasObjectId = false
            builderResult.objectId = nil
            return self
        }
        public var friendId:String {
            get {
                return builderResult.friendId
            }
            set (value) {
                builderResult.hasFriendId = true
                builderResult.friendId = value
            }
        }
        public var hasFriendId:Bool {
            get {
                return builderResult.hasFriendId
            }
        }
        @discardableResult
        public func setFriendId(_ value:String) -> ProtoFriend.Builder {
            self.friendId = value
            return self
        }
        @discardableResult
        public func clearFriendId() -> ProtoFriend.Builder{
            builderResult.hasFriendId = false
            builderResult.friendId = nil
            return self
        }
        public var section:String {
            get {
                return builderResult.section
            }
            set (value) {
                builderResult.hasSection = true
                builderResult.section = value
            }
        }
        public var hasSection:Bool {
            get {
                return builderResult.hasSection
            }
        }
        @discardableResult
        public func setSection(_ value:String) -> ProtoFriend.Builder {
            self.section = value
            return self
        }
        @discardableResult
        public func clearSection() -> ProtoFriend.Builder{
            builderResult.hasSection = false
            builderResult.section = nil
            return self
        }
        public var isDeleted:Bool {
            get {
                return builderResult.isDeleted
            }
            set (value) {
                builderResult.hasIsDeleted = true
                builderResult.isDeleted = value
            }
        }
        public var hasIsDeleted:Bool {
            get {
                return builderResult.hasIsDeleted
            }
        }
        @discardableResult
        public func setIsDeleted(_ value:Bool) -> ProtoFriend.Builder {
            self.isDeleted = value
            return self
        }
        @discardableResult
        public func clearIsDeleted() -> ProtoFriend.Builder{
            builderResult.hasIsDeleted = false
            builderResult.isDeleted = nil
            return self
        }
        public var createdAt:Int64 {
            get {
                return builderResult.createdAt
            }
            set (value) {
                builderResult.hasCreatedAt = true
                builderResult.createdAt = value
            }
        }
        public var hasCreatedAt:Bool {
            get {
                return builderResult.hasCreatedAt
            }
        }
        @discardableResult
        public func setCreatedAt(_ value:Int64) -> ProtoFriend.Builder {
            self.createdAt = value
            return self
        }
        @discardableResult
        public func clearCreatedAt() -> ProtoFriend.Builder{
            builderResult.hasCreatedAt = false
            builderResult.createdAt = nil
            return self
        }
        public var updatedAt:Int64 {
            get {
                return builderResult.updatedAt
            }
            set (value) {
                builderResult.hasUpdatedAt = true
                builderResult.updatedAt = value
            }
        }
        public var hasUpdatedAt:Bool {
            get {
                return builderResult.hasUpdatedAt
            }
        }
        @discardableResult
        public func setUpdatedAt(_ value:Int64) -> ProtoFriend.Builder {
            self.updatedAt = value
            return self
        }
        @discardableResult
        public func clearUpdatedAt() -> ProtoFriend.Builder{
            builderResult.hasUpdatedAt = false
            builderResult.updatedAt = nil
            return self
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> ProtoFriend.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> ProtoFriend.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        public var picture:String {
            get {
                return builderResult.picture
            }
            set (value) {
                builderResult.hasPicture = true
                builderResult.picture = value
            }
        }
        public var hasPicture:Bool {
            get {
                return builderResult.hasPicture
            }
        }
        @discardableResult
        public func setPicture(_ value:String) -> ProtoFriend.Builder {
            self.picture = value
            return self
        }
        @discardableResult
        public func clearPicture() -> ProtoFriend.Builder{
            builderResult.hasPicture = false
            builderResult.picture = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ProtoFriend.Builder {
            builderResult = ProtoFriend()
            return self
        }
        override public func clone() throws -> ProtoFriend.Builder {
            return try ProtoFriend.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ProtoFriend {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ProtoFriend {
            let returnMe:ProtoFriend = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ProtoFriend) throws -> ProtoFriend.Builder {
            if other == ProtoFriend() {
                return self
            }
            if other.hasObjectId {
                objectId = other.objectId
            }
            if other.hasFriendId {
                friendId = other.friendId
            }
            if other.hasSection {
                section = other.section
            }
            if other.hasIsDeleted {
                isDeleted = other.isDeleted
            }
            if other.hasCreatedAt {
                createdAt = other.createdAt
            }
            if other.hasUpdatedAt {
                updatedAt = other.updatedAt
            }
            if other.hasName {
                name = other.name
            }
            if other.hasPicture {
                picture = other.picture
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ProtoFriend.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFriend.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    objectId = try codedInputStream.readString()

                case 18:
                    friendId = try codedInputStream.readString()

                case 26:
                    section = try codedInputStream.readString()

                case 32:
                    isDeleted = try codedInputStream.readBool()

                case 40:
                    createdAt = try codedInputStream.readInt64()

                case 48:
                    updatedAt = try codedInputStream.readInt64()

                case 58:
                    name = try codedInputStream.readString()

                case 66:
                    picture = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ProtoFriend.Builder {
            let resultDecodedBuilder = ProtoFriend.Builder()
            if let jsonValueObjectId = jsonMap["objectId"] as? String {
                resultDecodedBuilder.objectId = jsonValueObjectId
            }
            if let jsonValueFriendId = jsonMap["friendId"] as? String {
                resultDecodedBuilder.friendId = jsonValueFriendId
            }
            if let jsonValueSection = jsonMap["section"] as? String {
                resultDecodedBuilder.section = jsonValueSection
            }
            if let jsonValueIsDeleted = jsonMap["isDeleted"] as? Bool {
                resultDecodedBuilder.isDeleted = jsonValueIsDeleted
            }
            if let jsonValueCreatedAt = jsonMap["createdAt"] as? String {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)!
            } else if let jsonValueCreatedAt = jsonMap["createdAt"] as? Int {
                resultDecodedBuilder.createdAt = Int64(jsonValueCreatedAt)
            }
            if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? String {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)!
            } else if let jsonValueUpdatedAt = jsonMap["updatedAt"] as? Int {
                resultDecodedBuilder.updatedAt = Int64(jsonValueUpdatedAt)
            }
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValuePicture = jsonMap["picture"] as? String {
                resultDecodedBuilder.picture = jsonValuePicture
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ProtoFriend.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ProtoFriend.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension ProtoUser: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ProtoUser> {
        var mergedArray = Array<ProtoUser>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ProtoUser? {
        return try ProtoUser.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoUser {
        return try ProtoUser.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "objectId": return self.objectId
        case "phone": return self.phone
        case "name": return self.name
        case "nickName": return self.nickName
        case "country": return self.country
        case "status": return self.status
        case "picture": return self.picture
        case "thumbnail": return self.thumbnail
        case "lastActive": return self.lastActive
        case "lastTerminate": return self.lastTerminate
        case "createdAt": return self.createdAt
        case "updatedAt": return self.updatedAt
        default: return nil
        }
    }
}
extension ProtoUser.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = ProtoUser
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "objectId": return self.objectId
            case "phone": return self.phone
            case "name": return self.name
            case "nickName": return self.nickName
            case "country": return self.country
            case "status": return self.status
            case "picture": return self.picture
            case "thumbnail": return self.thumbnail
            case "lastActive": return self.lastActive
            case "lastTerminate": return self.lastTerminate
            case "createdAt": return self.createdAt
            case "updatedAt": return self.updatedAt
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "objectId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.objectId = newSubscriptValue
            case "phone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.phone = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "nickName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.nickName = newSubscriptValue
            case "country":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.country = newSubscriptValue
            case "status":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.status = newSubscriptValue
            case "picture":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.picture = newSubscriptValue
            case "thumbnail":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.thumbnail = newSubscriptValue
            case "lastActive":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.lastActive = newSubscriptValue
            case "lastTerminate":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.lastTerminate = newSubscriptValue
            case "createdAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.createdAt = newSubscriptValue
            case "updatedAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.updatedAt = newSubscriptValue
            default: return
            }
        }
    }
}
extension ProtoFriend: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ProtoFriend> {
        var mergedArray = Array<ProtoFriend>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ProtoFriend? {
        return try ProtoFriend.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtoFriend {
        return try ProtoFriend.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "objectId": return self.objectId
        case "friendId": return self.friendId
        case "section": return self.section
        case "isDeleted": return self.isDeleted
        case "createdAt": return self.createdAt
        case "updatedAt": return self.updatedAt
        case "name": return self.name
        case "picture": return self.picture
        default: return nil
        }
    }
}
extension ProtoFriend.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = ProtoFriend
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "objectId": return self.objectId
            case "friendId": return self.friendId
            case "section": return self.section
            case "isDeleted": return self.isDeleted
            case "createdAt": return self.createdAt
            case "updatedAt": return self.updatedAt
            case "name": return self.name
            case "picture": return self.picture
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "objectId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.objectId = newSubscriptValue
            case "friendId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.friendId = newSubscriptValue
            case "section":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.section = newSubscriptValue
            case "isDeleted":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.isDeleted = newSubscriptValue
            case "createdAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.createdAt = newSubscriptValue
            case "updatedAt":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.updatedAt = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "picture":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.picture = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
